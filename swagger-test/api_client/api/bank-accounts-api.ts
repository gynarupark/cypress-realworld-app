/* tslint:disable */
/* eslint-disable */
/**
 * cypress-realworld-app-api
 * This is a sample api server for cypress-realworld-app. You can find out more about     the sample app at [cypress-realworld-app](https://github.com/cypress-io/cypress-realworld-app)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankAccount } from '../model';
// @ts-ignore
import { InlineObject } from '../model';
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export const BankAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsBankAccountIdDelete: async (bankAccountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('bankAccountsBankAccountIdDelete', 'bankAccountId', bankAccountId)
            const localVarPath = `/bankAccounts/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsBankAccountIdGet: async (bankAccountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('bankAccountsBankAccountIdGet', 'bankAccountId', bankAccountId)
            const localVarPath = `/bankAccounts/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets a list of bank accounts for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new bank account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsPost: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export const BankAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsBankAccountIdDelete(bankAccountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsBankAccountIdDelete(bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsBankAccountIdGet(bankAccountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsBankAccountIdGet(bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary gets a list of bank accounts for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary creates a new bank account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankAccountsPost(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankAccountsPost(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountsApi - factory interface
 * @export
 */
export const BankAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountsApiFp(configuration)
    return {
        /**
         * 
         * @summary delete bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsBankAccountIdDelete(bankAccountId: number, options?: any): AxiosPromise<string> {
            return localVarFp.bankAccountsBankAccountIdDelete(bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get bank account by ID
         * @param {number} bankAccountId ID of bank account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsBankAccountIdGet(bankAccountId: number, options?: any): AxiosPromise<BankAccount> {
            return localVarFp.bankAccountsBankAccountIdGet(bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets a list of bank accounts for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsGet(options?: any): AxiosPromise<Array<BankAccount>> {
            return localVarFp.bankAccountsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new bank account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsPost(inlineObject?: InlineObject, options?: any): AxiosPromise<BankAccount> {
            return localVarFp.bankAccountsPost(inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
export class BankAccountsApi extends BaseAPI {
    /**
     * 
     * @summary delete bank account by ID
     * @param {number} bankAccountId ID of bank account to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public bankAccountsBankAccountIdDelete(bankAccountId: number, options?: any) {
        return BankAccountsApiFp(this.configuration).bankAccountsBankAccountIdDelete(bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get bank account by ID
     * @param {number} bankAccountId ID of bank account to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public bankAccountsBankAccountIdGet(bankAccountId: number, options?: any) {
        return BankAccountsApiFp(this.configuration).bankAccountsBankAccountIdGet(bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary gets a list of bank accounts for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public bankAccountsGet(options?: any) {
        return BankAccountsApiFp(this.configuration).bankAccountsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new bank account
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    public bankAccountsPost(inlineObject?: InlineObject, options?: any) {
        return BankAccountsApiFp(this.configuration).bankAccountsPost(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}
